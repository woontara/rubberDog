#!/usr/bin/env python3
"""
Basic Malware Scanner
A defensive tool for identifying potentially malicious patterns in binaries

WARNING: For educational and defensive purposes only!
"""

import os
import sys
import hashlib
import re
import argparse
from pathlib import Path
import magic

class MalwareScanner:
    def __init__(self):
        # Suspicious API calls (Windows)
        self.suspicious_apis = [
            'CreateRemoteThread', 'WriteProcessMemory', 'VirtualAllocEx',
            'SetWindowsHookEx', 'GetProcAddress', 'LoadLibrary',
            'URLDownloadToFile', 'WinExec', 'CreateProcess',
            'RegSetValueEx', 'RegCreateKeyEx', 'CopyFile',
            'CreateFile', 'FindFirstFile', 'GetSystemDirectory',
            'GetWindowsDirectory', 'GetTempPath', 'CreateService',
            'OpenSCManager', 'StartService', 'CryptEncrypt',
            'CryptDecrypt', 'InternetOpen', 'InternetConnect',
            'HttpSendRequest', 'Sleep', 'GetTickCount'
        ]

        # Suspicious strings
        self.suspicious_strings = [
            'cmd.exe', 'powershell', 'regedit', 'taskkill',
            'netsh', 'schtasks', 'rundll32', 'regsvr32',
            'wscript', 'cscript', 'mshta', 'bitsadmin',
            'certutil', 'sc.exe', 'net.exe', 'ping.exe',
            'telnet', 'ftp', 'tftp', 'debug.exe'
        ]

        # File extensions that might be suspicious
        self.suspicious_extensions = [
            '.bat', '.cmd', '.com', '.pif', '.scr', '.vbs',
            '.js', '.jar', '.ps1', '.exe', '.dll'
        ]

        # Network indicators
        self.network_patterns = [
            r'\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b',  # IP addresses
            r'https?://[\\w\\.-]+',  # URLs
            r'ftp://[\\w\\.-]+',     # FTP URLs
            r'\\b[\\w.-]+\\.[a-zA-Z]{2,}\\b'  # Domain names
        ]

        # Crypto/encoding patterns
        self.crypto_patterns = [
            r'[A-Za-z0-9+/]{20,}={0,2}',  # Base64
            r'[a-fA-F0-9]{32}',           # MD5 hex
            r'[a-fA-F0-9]{40}',           # SHA1 hex
            r'[a-fA-F0-9]{64}',           # SHA256 hex
        ]

    def calculate_hashes(self, file_path):
        """Calculate file hashes"""
        try:
            with open(file_path, 'rb') as f:
                data = f.read()

            return {
                'md5': hashlib.md5(data).hexdigest(),
                'sha1': hashlib.sha1(data).hexdigest(),
                'sha256': hashlib.sha256(data).hexdigest(),
                'size': len(data)
            }
        except Exception as e:
            return {'error': str(e)}

    def extract_strings(self, file_path, min_length=4):
        """Extract printable strings from file"""
        try:
            with open(file_path, 'rb') as f:
                data = f.read()

            strings = []
            current = ""

            for byte in data:
                char = chr(byte) if 32 <= byte <= 126 else None
                if char:
                    current += char
                else:
                    if len(current) >= min_length:
                        strings.append(current)
                    current = ""

            if len(current) >= min_length:
                strings.append(current)

            return strings
        except Exception as e:
            return []

    def check_file_type(self, file_path):
        """Check file type and detect potential masquerading"""
        try:
            # Get file extension
            extension = Path(file_path).suffix.lower()

            # Get actual file type
            actual_type = magic.from_file(str(file_path))

            # Check for extension mismatch
            suspicious = False
            if extension in ['.txt', '.jpg', '.png', '.gif', '.pdf']:
                if 'executable' in actual_type.lower() or 'PE32' in actual_type:
                    suspicious = True

            return {
                'extension': extension,
                'actual_type': actual_type,
                'suspicious_extension': extension in self.suspicious_extensions,
                'type_mismatch': suspicious
            }
        except Exception as e:
            return {'error': str(e)}

    def scan_apis(self, strings):
        """Scan for suspicious API calls"""
        found_apis = []
        for string in strings:
            for api in self.suspicious_apis:
                if api.lower() in string.lower():
                    found_apis.append({
                        'api': api,
                        'context': string
                    })
        return found_apis

    def scan_suspicious_strings(self, strings):
        """Scan for suspicious strings"""
        found_strings = []
        for string in strings:
            for suspicious in self.suspicious_strings:
                if suspicious.lower() in string.lower():
                    found_strings.append({
                        'pattern': suspicious,
                        'context': string
                    })
        return found_strings

    def scan_network_indicators(self, strings):
        """Scan for network indicators"""
        indicators = []
        for string in strings:
            for pattern in self.network_patterns:
                matches = re.findall(pattern, string, re.IGNORECASE)
                for match in matches:
                    indicators.append({
                        'type': 'network',
                        'value': match,
                        'context': string
                    })
        return indicators

    def scan_crypto_patterns(self, strings):
        """Scan for crypto/encoding patterns"""
        patterns = []
        for string in strings:
            for pattern in self.crypto_patterns:
                matches = re.findall(pattern, string)
                for match in matches:
                    pattern_type = 'unknown'
                    if len(match) == 32 and re.match(r'^[a-fA-F0-9]+$', match):
                        pattern_type = 'md5'
                    elif len(match) == 40 and re.match(r'^[a-fA-F0-9]+$', match):
                        pattern_type = 'sha1'
                    elif len(match) == 64 and re.match(r'^[a-fA-F0-9]+$', match):
                        pattern_type = 'sha256'
                    elif re.match(r'^[A-Za-z0-9+/]+=*$', match):
                        pattern_type = 'base64'

                    patterns.append({
                        'type': pattern_type,
                        'value': match,
                        'context': string
                    })
        return patterns

    def calculate_risk_score(self, scan_results):
        """Calculate a basic risk score"""
        score = 0

        # File type checks
        if scan_results['file_info'].get('type_mismatch'):
            score += 30
        if scan_results['file_info'].get('suspicious_extension'):
            score += 10

        # API calls
        score += len(scan_results['suspicious_apis']) * 5

        # Suspicious strings
        score += len(scan_results['suspicious_strings']) * 3

        # Network indicators
        score += len(scan_results['network_indicators']) * 8

        # Crypto patterns
        score += len(scan_results['crypto_patterns']) * 2

        # High entropy might indicate packing/encryption
        total_strings = len(scan_results['all_strings'])
        if total_strings > 0:
            unique_ratio = len(set(scan_results['all_strings'])) / total_strings
            if unique_ratio > 0.8:  # High uniqueness might indicate obfuscation
                score += 15

        return min(score, 100)  # Cap at 100

    def scan_file(self, file_path):
        """Perform complete malware scan"""
        if not os.path.exists(file_path):
            return {'error': 'File not found'}

        print(f"Scanning: {file_path}")
        print("=" * 60)

        # Calculate hashes
        hashes = self.calculate_hashes(file_path)

        # Check file type
        file_info = self.check_file_type(file_path)

        # Extract strings
        strings = self.extract_strings(file_path)

        # Perform scans
        suspicious_apis = self.scan_apis(strings)
        suspicious_strings = self.scan_suspicious_strings(strings)
        network_indicators = self.scan_network_indicators(strings)
        crypto_patterns = self.scan_crypto_patterns(strings)

        # Compile results
        results = {
            'file_path': str(file_path),
            'hashes': hashes,
            'file_info': file_info,
            'all_strings': strings,
            'suspicious_apis': suspicious_apis,
            'suspicious_strings': suspicious_strings,
            'network_indicators': network_indicators,
            'crypto_patterns': crypto_patterns
        }

        # Calculate risk score
        risk_score = self.calculate_risk_score(results)
        results['risk_score'] = risk_score

        return results

    def print_results(self, results):
        """Print scan results in a readable format"""
        if 'error' in results:
            print(f"Error: {results['error']}")
            return

        print(f"\\n[FILE INFORMATION]")
        print(f"  Path: {results['file_path']}")

        if 'error' not in results['hashes']:
            print(f"  Size: {results['hashes']['size']} bytes")
            print(f"  MD5: {results['hashes']['md5']}")
            print(f"  SHA1: {results['hashes']['sha1']}")
            print(f"  SHA256: {results['hashes']['sha256']}")

        if 'error' not in results['file_info']:
            print(f"  Extension: {results['file_info']['extension']}")
            print(f"  Type: {results['file_info']['actual_type']}")
            if results['file_info'].get('type_mismatch'):
                print("  ⚠️  WARNING: File extension doesn't match actual type!")
            if results['file_info'].get('suspicious_extension'):
                print("  ⚠️  WARNING: Suspicious file extension!")

        print(f"\\n[RISK ASSESSMENT]")
        risk_score = results['risk_score']
        if risk_score < 20:
            risk_level = "LOW"
            emoji = "✅"
        elif risk_score < 50:
            risk_level = "MEDIUM"
            emoji = "⚠️"
        elif risk_score < 80:
            risk_level = "HIGH"
            emoji = "🔴"
        else:
            risk_level = "CRITICAL"
            emoji = "🚨"

        print(f"  Risk Score: {risk_score}/100")
        print(f"  Risk Level: {emoji} {risk_level}")

        # Suspicious APIs
        if results['suspicious_apis']:
            print(f"\\n[SUSPICIOUS API CALLS] ({len(results['suspicious_apis'])} found)")
            for api in results['suspicious_apis'][:10]:
                print(f"  - {api['api']}")
            if len(results['suspicious_apis']) > 10:
                print(f"  ... and {len(results['suspicious_apis']) - 10} more")

        # Suspicious strings
        if results['suspicious_strings']:
            print(f"\\n[SUSPICIOUS STRINGS] ({len(results['suspicious_strings'])} found)")
            for string in results['suspicious_strings'][:10]:
                print(f"  - {string['pattern']}")
            if len(results['suspicious_strings']) > 10:
                print(f"  ... and {len(results['suspicious_strings']) - 10} more")

        # Network indicators
        if results['network_indicators']:
            print(f"\\n[NETWORK INDICATORS] ({len(results['network_indicators'])} found)")
            for indicator in results['network_indicators'][:10]:
                print(f"  - {indicator['value']}")
            if len(results['network_indicators']) > 10:
                print(f"  ... and {len(results['network_indicators']) - 10} more")

        # Crypto patterns
        if results['crypto_patterns']:
            print(f"\\n[CRYPTO/ENCODING PATTERNS] ({len(results['crypto_patterns'])} found)")
            for pattern in results['crypto_patterns'][:5]:
                print(f"  - {pattern['type']}: {pattern['value'][:50]}...")
            if len(results['crypto_patterns']) > 5:
                print(f"  ... and {len(results['crypto_patterns']) - 5} more")

        print(f"\\n[SUMMARY]")
        print(f"  Total strings extracted: {len(results['all_strings'])}")
        print(f"  Suspicious indicators found: {len(results['suspicious_apis']) + len(results['suspicious_strings']) + len(results['network_indicators'])}")

        if risk_score > 50:
            print(f"\\n⚠️  RECOMMENDATION: This file shows multiple suspicious indicators.")
            print(f"   Consider running it in a sandboxed environment for further analysis.")

def main():
    parser = argparse.ArgumentParser(description='Basic Malware Scanner')
    parser.add_argument('file', help='File to scan')
    parser.add_argument('--json', action='store_true', help='Output results in JSON format')
    args = parser.parse_args()

    scanner = MalwareScanner()
    results = scanner.scan_file(args.file)

    if args.json:
        import json
        print(json.dumps(results, indent=2, default=str))
    else:
        scanner.print_results(results)

if __name__ == "__main__":
    main()